#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <map>
#include <set>
#include <cstdlib>
#include "reducer.h"


// Constructors
Reducer::Reducer() {
}

Reducer::Reducer(int id) {
    this->setId(id);
}

Reducer::Reducer(int id, int exp) {
    this->setId(id);
    this->setExp(exp);
}


// `<` overload
bool operator< (const Reducer &r1, const Reducer &r2) {
    return r1.id < r2.id;
}

// `==` overload
bool operator== (const Reducer &r1, const Reducer &r2) {
    return r1.id == r2.id;
}


// Getters
int Reducer::getId() {
    return this->id;
}

int Reducer::getExp() {
    return this->exp;
}


// Setters
void Reducer::setId(int id) {
    this->id = id;
}

void Reducer::setExp(int exp) {
    this->exp = exp;
}


/**
 * @brief Take all partial lists and use the reducers to count the unique numbers for each exponent
 * @param all_partial_lists Partial lists generated by mappers
 * @return The number of unique numbers for each exponent
*/
int Reducer::process(std::vector<std::map<int, std::vector<long long>>> all_partial_lists) {
    // Get unique values
    std::set<long long> unique_values;
    for (std::map<int, std::vector<long long>> partial_list : all_partial_lists) {
        for (long long num : partial_list[this->getExp()]) {
            unique_values.insert(num);
        }   
    }

    // Write to file
    std::string output_file_path = "out" + std::to_string(this->getExp()) + ".txt";
    std::ofstream file;
    file.open(output_file_path);

    if (!file.is_open()) {
        std::cout << "Couldn't open the file `" << output_file_path << "`\n";
        return -1;
    }

    // Count unique values and close the file
    int unique_count = unique_values.size();
    file << unique_count;
    file.close();

    return unique_count;
}
